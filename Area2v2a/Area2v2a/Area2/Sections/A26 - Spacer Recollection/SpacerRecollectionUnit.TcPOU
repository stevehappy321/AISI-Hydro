<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SpacerRecollectionUnit" Id="{6fea2dc6-ce06-4fa1-9588-ba3bbddda180}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SpacerRecollectionUnit //EXTENDS SectionEx
VAR_IN_OUT
	robot : RobotA26;
	robotSlider : ServoNC;
	(*
	A24_LRC_C01 : Conveyor;
	A24_LRC_C03 : Conveyor;
	A24_LRC_C05 : Conveyor;
	A24_LRC_C07 : Conveyor;
	A24_LRC_C09 : Conveyor;
	A24_LRC_C11 : Conveyor;
	A24_LRC_C13 : Conveyor;
	
	A24_LRC_C02 : ConveyorSC;
	A24_LRC_C04 : ConveyorSC;
	A24_LRC_C06 : ConveyorSC;
	A24_LRC_C08 : ConveyorSC;
	A24_LRC_C10 : ConveyorSC;
	A24_LRC_C12 : ConveyorSC;
	*)
END_VAR
VAR_INPUT
	conveyorOccupied_A24_LRC_C01 : BOOL; //odd number conveyors move the conveyor down the cell
	conveyorOccupied_A24_LRC_C03 : BOOL;
	conveyorOccupied_A24_LRC_C05 : BOOL;
	conveyorOccupied_A24_LRC_C07 : BOOL;
	conveyorOccupied_A24_LRC_C09 : BOOL;
	conveyorOccupied_A24_LRC_C11 : BOOL;
	conveyorOccupied_A24_LRC_C13 : BOOL;
	
	spacerPresent_A24_LRC_C02 : BOOL;
	spacerPresent_A24_LRC_C04 : BOOL;
	spacerPresent_A24_LRC_C06 : BOOL;
	spacerPresent_A24_LRC_C08 : BOOL;
	spacerPresent_A24_LRC_C10 : BOOL;
	spacerPresent_A24_LRC_C12 : BOOL;
END_VAR
VAR_OUTPUT
	ready : BOOL;
	busy : BOOL;
	done : BOOL;
	error : BOOL;
	
	failCounter : INT;
END_VAR
VAR
	status : SectionTask;
	step : (IDLE, SLIDE, PICK_SPACER);
	iConveyorLine : INT;
END_VAR
VAR //slider positions
	pickPos1, pickPos2 : LREAL;
END_VAR
VAR_STAT CONSTANT
	COMPLETE : INT := 1050;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[ready := step = 0;
busy := step > 0;
done := done;
error := error;

CASE status OF
	SectionTask.IDLE: //do nothing
	
	SectionTask.ALIGN: //receive incoming bundle
	
	SectionTask.ACTIVE: //measure new bundle
		
	SectionTask.DISCHARGE: //send bundle down cell, then clear spacers
		IF 
			conveyorOccupied_A24_LRC_C01 OR
			conveyorOccupied_A24_LRC_C03 OR
			conveyorOccupied_A24_LRC_C05 OR
			conveyorOccupied_A24_LRC_C07 OR
			conveyorOccupied_A24_LRC_C09 OR
			conveyorOccupied_A24_LRC_C11 OR
			conveyorOccupied_A24_LRC_C13
		THEN
			
			robot.clearCommand();
			
		ELSIF process() THEN //remove spacers from transfer conveyors in ascending order
			status := SectionTask.COMPLETE;
			
		END_IF
		
	SectionTask.COMPLETE: //reset, ready to receive next bundle
		done := TRUE;
	
END_CASE]]></ST>
    </Implementation>
    <Method Name="process" Id="{0707ef1b-9ba5-4d26-b34d-69bdd29b3450}">
      <Declaration><![CDATA[METHOD process : BOOL
VAR
	spacersPresent : ARRAY[1..6] OF BOOL := [
		spacerPresent_A24_LRC_C02,
		spacerPresent_A24_LRC_C04,
		spacerPresent_A24_LRC_C06,
		spacerPresent_A24_LRC_C08,
		spacerPresent_A24_LRC_C10,
		spacerPresent_A24_LRC_C12];
END_VAR
VAR CONSTANT
	suctionDistance : INT := 10;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

iConveyorLine := MAX(1, iConveyorLine); //value is always at least 1

CASE step OF
	IDLE:
		IF DataIsEmpty(arr := ADR(spacersPresent), arrSize := SIZEOF(spacersPresent)) THEN
			robotSlider.toHome();
			
			iConveyorLine := 0;
			failCounter := 0;
			process := TRUE;
		
		ELSIF NOT spacersPresent[iConveyorLine] THEN
			iConveyorLine := iConveyorLine + 1;
			
		ELSIF robot.Ready THEN
			step := SLIDE;
			
		END_IF
		
	SLIDE:
		CASE iConveyorLine OF
			1,2,3:		robotSlider.moveAbsolute(newTarget := pickPos1);
			4,5,6:		robotSlider.moveAbsolute(newTarget := pickPos2);
		END_CASE
		
		//replace this condition with WithinTolerance() if the slider spends too long adjusting its position
		IF robotSlider.CurrentPosition = robotSlider.TargetPosition THEN
			step := PICK_SPACER;
		END_IF
		
	PICK_SPACER:		
		IF robot.eoatDistance > suctionDistance THEN
			robot.HoldMaterial := 'SPACER';
		ELSE
			robot.HoldMaterial := '';
		END_IF
	
		IF robot.Done THEN
			step := COMPLETE;
		ELSE
			robot.setGroup(group := 1, value := TaskA26.PICK_SPACER);
			robot.setGroup(group := 2, value := iConveyorLine);
		END_IF
		
	COMPLETE:
		robot.HoldMaterial := '';
		
		IF spacersPresent[iConveyorLine] THEN
			failCounter := failCounter + 1;
		END_IF
		
		robot.clearCommand();
		step := 0;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SpacerRecollectionUnit">
      <LineId Id="103" Count="2" />
      <LineId Id="101" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="265" Count="5" />
      <LineId Id="280" Count="8" />
      <LineId Id="367" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="307" Count="1" />
      <LineId Id="310" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="264" Count="0" />
    </LineIds>
    <LineIds Name="SpacerRecollectionUnit.process">
      <LineId Id="49" Count="1" />
      <LineId Id="41" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="110" Count="2" />
      <LineId Id="109" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="68" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="43" Count="3" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="72" Count="1" />
      <LineId Id="76" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>