<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Validation" Id="{2464cf26-8c9f-4fbe-9ea4-d9320ca9dedd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Validation
VAR
	errors : ARRAY[0..GVL.maxMessages] OF STRING_5K;
	warnings : ARRAY[0..GVL.maxMessages] OF STRING_5K;

	tempErrors : ARRAY[0..GVL.maxMessages] OF STRING_5K;
	tempWarnings : ARRAY[0..GVL.maxMessages] OF STRING_5K;
	numErr : INT;
	numWarn : INT;
	
	bundleExists : BOOL;
		
	dbCheckStep : (CONNECT, READY, EXECUTE, FINISH);
	validationStep : (CHECK_EXISTING_BUNDLE, VALIDATE_DATA, FINISH_VALIDATION);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE validationStep OF
	CHECK_EXISTING_BUNDLE:
		IF checkExistingBundles() THEN
			validationStep := VALIDATE_DATA;
		END_IF
	
	VALIDATE_DATA:
		validateGeneralData(); //general data
		validateProcess(); //required processing
		validateMaterials(); //recipe
		
		validationStep := FINISH_VALIDATION;
		
	FINISH_VALIDATION: //copy temp to ADS and clear temp
		MEMCPY(ADR(errors), ADR(tempErrors), SIZEOF(errors));
		MEMCPY(ADR(warnings), ADR(tempWarnings), SIZEOF(warnings));
		
		MEMSET(ADR(tempErrors), 0, SIZEOF(tempErrors));
		MEMSET(ADR(tempWarnings), 0, SIZEOF(tempWarnings));
		numErr := 0;
		numWarn := 0;
		
		validationStep := CHECK_EXISTING_BUNDLE;
END_CASE
]]></ST>
    </Implementation>
    <Folder Name="Validation Helpers" Id="{336bab4d-dfe1-43cc-8122-3620813a0a71}" />
    <Method Name="checkExistingBundles" Id="{11fec9c7-2dcd-4b8b-a43e-aec449f61511}">
      <Declaration><![CDATA[METHOD checkExistingBundles : BOOL
VAR_INST
	fbSQLCommand : FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	fbSQLDatabase : FB_SQLDatabaseEvt(sNetID := '', tTimeout := T#5S);
	fbSQLResult: FB_SQLResultEvt(sNetID := '', tTimeout := T#5S);
	
	
	cmd : ARRAY[0..2] OF STRING_5K;
	query : STRING_5K;
	tcMessage : I_TcMessage;
	existingID : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE dbCheckStep OF
	CONNECT:
		IF fbSQLDatabase.Connect(1) THEN
			IF NOT fbSqlDatabase.bError THEN
				dbCheckStep := READY;
			END_IF
		END_IF
		
	READY:
		IF fbSQLDatabase.CreateCmd(ADR(fbSQLCommand)) THEN
			dbCheckStep := EXECUTE;
		END_IF
	
	EXECUTE:
		cmd[0] := 'SELECT BundleID FROM "Bundle Data - Prototype" WHERE BundleID = $'';
		cmd[1] := TO_STRING(BundleData.id);
		cmd[2] := '$'';
		query := ConcatStrings(cmd, '', '', '');
		
		IF fbSQLCommand.ExecuteDataReturn(ADR(query), SIZEOF(query), ADR(fbSqlResult)) THEN
			dbCheckStep := FINISH;
		END_IF
		
	FINISH:
		fbSqlResult.Read(0, 1, ADR(existingID), SIZEOF(existingID), TRUE, FALSE);
		IF BundleData.id = existingID THEN
			bundleExists := TRUE;
		ELSE
			bundleExists := FALSE;
		END_IF
		IF fbSQLDatabase.Disconnect() THEN
			fbSqlResult.Release();
			checkExistingBundles := TRUE;
			dbCheckStep := CONNECT;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateCardboard" Id="{2b3695ad-06b1-4918-a8a3-f03b87508814}" FolderPath="Validation Helpers\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validateCardboard : BOOL
VAR_INST
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF i > 0 THEN
		IF
			StrapWrapRecipe.Cardboard[i].position = StrapWrapRecipe.Cardboard[i-1].position 
			AND
			NOT(StrapWrapRecipe.Cardboard[i].position = 0 OR StrapWrapRecipe.Cardboard[i-1].position = 0)
		THEN
			tempWarnings[numWarn] := 'Cardboard: duplicate position';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateChipboard" Id="{85d71b23-c0e7-4dee-815a-c41b453aeaab}" FolderPath="Validation Helpers\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validateChipboard : BOOL
VAR_INST
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF i > 0 THEN
		IF 
			StrapWrapRecipe.Chipboard[i].position = StrapWrapRecipe.Chipboard[i-1].position 
			AND
			NOT(StrapWrapRecipe.Chipboard[i].position = 0 OR StrapWrapRecipe.Chipboard[i-1].position = 0)
		THEN
			tempWarnings[numWarn] := 'Chipboard: duplicate position';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateCornerGuard" Id="{5130abb2-8880-4812-b2fe-bc561a83b061}" FolderPath="Validation Helpers\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validateCornerGuard : BOOL
VAR_INST
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF i > 0 THEN
		IF 
			StrapWrapRecipe.CornerGuard[i].position = StrapWrapRecipe.CornerGuard[i-1].position 
			AND
			NOT(StrapWrapRecipe.CornerGuard[i].position = 0 OR StrapWrapRecipe.CornerGuard[i-1].position = 0)
		THEN
			tempWarnings[numWarn] := 'Corner Guard: duplicate position';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateGeneralData" Id="{02e44bac-6aac-40e9-a641-9c054bdbaf32}">
      <Declaration><![CDATA[METHOD validateGeneralData : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF BundleData.id = '' THEN //bundle id
	tempErrors[numErr] := 'ID missing';
	numErr := numErr + 1;
ELSIF BundleData.id <> '' AND bundleExists THEN
	tempWarnings[numWarn] := 'Bundle with entered ID already exists, proceeding will overwrite the existing recipe';
	numWarn := numWarn + 1;
END_IF

IF BundleData.weight = 0 THEN
	tempErrors[numErr] := 'Bundle weight missing';
	numErr := numErr + 1;
END_IF
IF BundleData.length = 0 OR BundleData.height = 0 OR BundleData.width = 0 THEN
	tempErrors[numErr] := 'Bundle dimension(s) missing';
	numErr := numErr + 1;
END_IF
IF BundleData.pieces = 0 OR BundleData.layers = 0 OR BundleData.piecesPerLayer = 0 THEN
	tempErrors[numErr] := 'Bundle layer dimension(s) missing';
	numErr := numErr + 1;
END_IF

IF Extrusiondata.extrusionWeight = 0 THEN
	tempErrors[numErr] := 'Extrusion weight missing';
	numErr := numErr + 1;
END_IF

IF Extrusiondata.extrusionHeight = 0 OR Extrusiondata.extrusionWidth = 0 THEN
	tempErrors[numErr] := 'Extrusion dimension(s) missing';
	numErr := numErr + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateMaterials" Id="{1ae1a68e-dac5-4e97-8a19-d881f7d2bd32}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validateMaterials : BOOL
VAR_INST
	//fbSQLCommand : FB_SQLCommandEvt(sNetID := '', tTimeout := T#5S);
	//fbSQLDatabase : FB_SQLDatabaseEvt (sNetID := '', tTimeout := T#5S);
	//fbSQLResult: FB_SQLResultEvt(sNetID:='', tTimeout:=T#5S);
	
	
	
	
	//sqlResult : FB_SQLResult;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
validatePaper();
validateCardboard();
validateCornerGuard();
validateChipboard();
validateWoodBunk();]]></ST>
      </Implementation>
    </Method>
    <Method Name="validatePaper" Id="{6e6d7d8a-4304-4b81-8399-c41f86090a25}" FolderPath="Validation Helpers\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validatePaper : BOOL
VAR_INST
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF StrapWrapRecipe.TopPaper[i].start = 0 AND StrapWrapRecipe.TopPaper[i].end = 0 THEN //unused entry, do nothing and skip
		CONTINUE;
	END_IF
	
	IF StrapWrapRecipe.TopPaper[i].start >= StrapWrapRecipe.TopPaper[i].end THEN //invalid interval where start > end
		tempErrors[numErr] := 'Paper (Top): Start position must be less than end position';
		numErr := numErr + 1;
	END_IF
	
	IF i > 0 THEN
		IF StrapWrapRecipe.TopPaper[i].start < StrapWrapRecipe.TopPaper[i-1].end AND StrapWrapRecipe.TopPaper[i-1].end > 0 THEN //overlaps
			tempWarnings[numWarn] := 'Paper (Top): Overlapping segments';
			numWarn := numWarn + 1;
		ELSIF StrapWrapRecipe.TopPaper[i].start = StrapWrapRecipe.TopPaper[i-1].end AND StrapWrapRecipe.TopPaper[i-1].end > 0 THEN //adjacency
			tempWarnings[numWarn] := 'Paper (Top): Adjacent segments';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR

FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF StrapWrapRecipe.LeftPaper[i].start = 0 AND StrapWrapRecipe.LeftPaper[i].end = 0 THEN //unused entry, do nothing and skip
		CONTINUE;
	END_IF
	
	IF StrapWrapRecipe.LeftPaper[i].start >= StrapWrapRecipe.LeftPaper[i].end THEN //invalid interval where start > end
		tempErrors[numErr] := 'Paper (Left): Start position must be less than end position';
		numErr := numErr + 1;
	END_IF
	
	IF i > 0 THEN
		IF StrapWrapRecipe.LeftPaper[i].start < StrapWrapRecipe.LeftPaper[i-1].end AND StrapWrapRecipe.LeftPaper[i-1].end > 0 THEN //overlaps
			tempWarnings[numWarn] := 'Paper (Left): Overlapping intervals, ignore if this is intended';
			numWarn := numWarn + 1;
		ELSIF StrapWrapRecipe.LeftPaper[i].start = StrapWrapRecipe.LeftPaper[i-1].end AND StrapWrapRecipe.LeftPaper[i-1].end > 0 THEN //adjacency
			tempWarnings[numWarn] := 'Paper (Left): Adjacent intervals can connected, ignore if this is intended';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR

FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF StrapWrapRecipe.RightPaper[i].start = 0 AND StrapWrapRecipe.RightPaper[i].end = 0 THEN //unused entry, do nothing and skip
		CONTINUE;
	END_IF
	
	IF StrapWrapRecipe.RightPaper[i].start >= StrapWrapRecipe.RightPaper[i].end THEN //invalid interval where start > end
		tempErrors[numErr] := 'Paper (Right): Start position must be less than end position';
		numErr := numErr + 1;
	END_IF
	
	IF i > 0 THEN
		IF StrapWrapRecipe.RightPaper[i].start < StrapWrapRecipe.RightPaper[i-1].end AND StrapWrapRecipe.RightPaper[i-1].end > 0 THEN //overlaps
			tempWarnings[numWarn] := 'Paper (Right): Overlapping intervals, ignore if this is intended';
			numWarn := numWarn + 1;
		ELSIF StrapWrapRecipe.RightPaper[i].start = StrapWrapRecipe.RightPaper[i-1].end AND StrapWrapRecipe.RightPaper[i-1].end > 0 THEN //adjacency
			tempWarnings[numWarn] := 'Paper (Right): Adjacent intervals can connected, ignore if this is intended';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR

FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF StrapWrapRecipe.BottomPaper[i].start = 0 AND StrapWrapRecipe.BottomPaper[i].end = 0 THEN //unused entry, do nothing and skip
		CONTINUE;
	END_IF
	
	IF StrapWrapRecipe.BottomPaper[i].start >= StrapWrapRecipe.BottomPaper[i].end THEN //invalid interval where start > end
		tempErrors[numErr] := 'Paper (Bottom): Start position must be less than end position';
		numErr := numErr + 1;
	END_IF
	
	IF i > 0 THEN
		IF StrapWrapRecipe.BottomPaper[i].start < StrapWrapRecipe.BottomPaper[i-1].end AND StrapWrapRecipe.BottomPaper[i-1].end > 0 THEN //overlaps
			tempWarnings[numWarn] := 'Paper (Bottom): Overlapping segments';
			numWarn := numWarn + 1;
		ELSIF StrapWrapRecipe.BottomPaper[i].start = StrapWrapRecipe.BottomPaper[i-1].end AND StrapWrapRecipe.BottomPaper[i-1].end > 0 THEN //adjacency
			tempWarnings[numWarn] := 'Paper (Bottom): Adjacent segments';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateProcess" Id="{1f7c5baf-3a53-43c0-9455-37b7360ed8c7}">
      <Declaration><![CDATA[METHOD validateProcess : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( //if recipe exists but auto/manual strap and wrap is not selected
	StrapWrapRecipe.TopPaper[0].end > 0 OR 
	StrapWrapRecipe.LeftPaper[0].end > 0 OR 
	StrapWrapRecipe.RightPaper[0].end > 0 OR
	StrapWrapRecipe.BottomPaper[0].end > 0 OR 
	
	StrapWrapRecipe.Cardboard[0].top <> '' OR 
	StrapWrapRecipe.Cardboard[0].left <> '' OR 
	StrapWrapRecipe.Cardboard[0].right <> '' OR 
	StrapWrapRecipe.Cardboard[0].bottom <> '' OR 
	
	StrapWrapRecipe.Cardboard[0].topLeft <> '' OR 
	StrapWrapRecipe.Cardboard[0].topRight <> '' OR 
	StrapWrapRecipe.Cardboard[0].bottomLeft <> '' OR 
	StrapWrapRecipe.Cardboard[0].bottomRight <> '' OR 
	
	StrapWrapRecipe.CornerGuard[0].topLeft <> '' OR 
	StrapWrapRecipe.CornerGuard[0].topRight <> '' OR 
	StrapWrapRecipe.CornerGuard[0].bottomLeft <> '' OR 
	StrapWrapRecipe.CornerGuard[0].bottomRight <> '' OR 
	
	StrapWrapRecipe.Chipboard[0].top <> '' OR 
	StrapWrapRecipe.Chipboard[0].left <> '' OR 
	StrapWrapRecipe.Chipboard[0].right <> '' OR 
	StrapWrapRecipe.Chipboard[0].Bottom <> '' OR 

	StrapWrapRecipe.WoodBunk[0].top <> '' OR 
	StrapWrapRecipe.WoodBunk[0].left <> '' OR 
	StrapWrapRecipe.WoodBunk[0].right <> '' OR 
	StrapWrapRecipe.WoodBunk[0].Bottom <> '')
THEN
	IF NOT BundleData.requiredProcessing[BundleData.AUTO_SS] AND NOT BundleData.requiredProcessing[BundleData.MANUAL_SS] THEN
		tempErrors[numErr] := 'Recipe exists but strap and wrap processes are not selected (Auto/Manual Strap and Wrap)';
		numErr := numErr + 1;
	END_IF
ELSE //no recipe exists but auto/manual strap and wrap is selected
	IF BundleData.requiredProcessing[BundleData.AUTO_SS] OR BundleData.requiredProcessing[BundleData.MANUAL_SS] THEN
		tempWarnings[numWarn] := 'Strap and wrap processes are selected but there is no recipe, is this intended?';
		numWarn := numWarn + 1;
	END_IF
END_IF

	
IF //auto and manual strap/wrap are both selected
	(BundleData.requiredProcessing[BundleData.AUTO_RE] AND BundleData.requiredProcessing[BundleData.MANUAL_RE]) OR
	(BundleData.requiredProcessing[BundleData.AUTO_SS] AND BundleData.requiredProcessing[BundleData.MANUAL_SS])
THEN
	tempErrors[numErr] := 'Auto and Manual processes of the same type cannot be selected together';
	numErr := numErr + 1;
	
ELSIF //no processes selected
	NOT BundleData.requiredProcessing[BundleData.AUTO_RE] AND 
	NOT BundleData.requiredProcessing[BundleData.AUTO_SS] AND
	NOT BundleData.requiredProcessing[BundleData.MANUAL_RE] AND 
	NOT BundleData.requiredProcessing[BundleData.MANUAL_SS]
THEN
	tempWarnings[numWarn] := 'No processes are selected, is this intended?';
	numWarn := numWarn + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="validateWoodBunk" Id="{02083b5d-e4d9-49ef-a36c-660d2366a08f}" FolderPath="Validation Helpers\">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD validateWoodBunk : BOOL
VAR_INST
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxMaterials BY 1 DO
	IF i > 0 THEN
		IF 
			StrapWrapRecipe.WoodBunk[i].position = StrapWrapRecipe.WoodBunk[i-1].position 
			AND
			NOT(StrapWrapRecipe.WoodBunk[i].position = 0 OR StrapWrapRecipe.WoodBunk[i-1].position = 0)
		THEN
			tempWarnings[numWarn] := 'Wood Bunk: duplicate position';
			numWarn := numWarn + 1;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Validation">
      <LineId Id="350" Count="3" />
      <LineId Id="359" Count="9" />
      <LineId Id="375" Count="2" />
      <LineId Id="372" Count="2" />
      <LineId Id="371" Count="0" />
      <LineId Id="381" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="168" Count="0" />
    </LineIds>
    <LineIds Name="Validation.checkExistingBundles">
      <LineId Id="6" Count="24" />
      <LineId Id="54" Count="1" />
      <LineId Id="72" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateCardboard">
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateChipboard">
      <LineId Id="21" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateCornerGuard">
      <LineId Id="21" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateGeneralData">
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="8" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateMaterials">
      <LineId Id="87" Count="4" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validatePaper">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="29" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="162" Count="18" />
      <LineId Id="40" Count="0" />
      <LineId Id="104" Count="19" />
      <LineId Id="103" Count="0" />
      <LineId Id="79" Count="19" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateProcess">
      <LineId Id="6" Count="2" />
      <LineId Id="79" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="67" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="69" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="74" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="32" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Validation.validateWoodBunk">
      <LineId Id="21" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>