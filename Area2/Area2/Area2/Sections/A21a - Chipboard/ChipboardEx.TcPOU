<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ChipboardEx" Id="{4fb9c3b0-6386-4034-a58f-58f8ce2d611a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ChipboardEx EXTENDS SectionEx
VAR_IN_OUT //references to required hardware
	robotLeft, robotRight : RobotA21;
	toolStorageLeft, toolStorageRight : A21ToolStorage;
	
	skidLeft, skidRight : SkidMagazine;
END_VAR
VAR	
	step : (IDLE, RETRACT_CONVEYOR, LOAD_CIP, EXTEND_CONVEYOR, COMPLETE := 1050);
	
	loadSet : INT;
END_VAR
VAR //bundle data
	materialsArr : (*REFERENCE TO*) ARRAY[0..GVL.maxPairs] OF PositionMaterials;
END_VAR
VAR
	aoiLoadLeft, aoiLoadRight : AOI_LoadChipboard;
	
	pushSmallConveyorPos : REAL;
	pushLargeConveyorPos : REAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{warning disable C0371}
callLocalModules(); //call local modules

blocks(); //call AOIs and large library FBs

runPML(); //run PackML state machine]]></ST>
    </Implementation>
    <Folder Name="Actions" Id="{1d4cf889-3e68-46d8-ad77-8ad472520e03}" />
    <Folder Name="PML Inter. States" Id="{ab9cbcbe-212b-4c2d-a6dc-6cefed8dd476}" />
    <Action Name="blocks" Id="{65e32b38-4b01-4085-85bd-8759d42f2769}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[aoiLoadRight(
	sectionID:= sectionID, 
	execute:= ,
	robot:= robotRight, 
	storage:= skidRight,
	loadedMaterials:= loadedMaterials,
	surfaceID:= , 
	material:= , 
	loadedMaterials=> , 
	done=> , 
	error=> );
	
aoiLoadRight(
	sectionID:= sectionID, 
	execute:= , 
	robot:= robotRight, 
	storage:= skidRight,
	loadedMaterials:= loadedMaterials, 
	surfaceID:= , 
	material:= , 
	busy=> , 
	done=> , 
	error=> , 
	recovery=> , 
	failCounter=> );]]></ST>
      </Implementation>
    </Action>
    <Method Name="callLocalModules" Id="{bea4cf3f-a5a1-4b36-af59-25abcfb940a0}">
      <Declaration><![CDATA[METHOD PRIVATE callLocalModules : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="load" Id="{fb843105-64e1-44e7-8bcd-619ab2de166a}">
      <Declaration><![CDATA[METHOD PROTECTED load : BOOL
VAR_INPUT
	pairIndex : INT;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR
VAR
	pair : REFERENCE TO PositionMaterials REF= materialsArr[pairIndex];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
IF robotLeft.error AND robotLeft.error THEN
	error := TRUE;
	RETURN;

ELSIF
	( robotLeft.reservation <> sectionID AND_THEN robotLeft.reserve(sectionID) ) OR
	( robotRight.reservation <> sectionID AND_THEN robotRight.reserve(sectionID) ) THEN
	RETURN;
	
ELSIF //wrong tool and not finished changing tool
	(robotLeft.tool <> sectionID AND_THEN NOT robotLeft.changeEOAT(targetTool := sectionID)) OR
	(robotRight.tool <> sectionID AND_THEN NOT robotRight.changeEOAT(targetTool := sectionID))
THEN
	RETURN;
END_IF
//robots ok

CASE loadSet OF
	0: //left robot -> top, right robot -> bottom
		IF aoiLoadLeft.done AND aoiLoadRight.done THEN
			aoiLoadLeft.execute := aoiLoadRight.execute := FALSE;
			loadSet := 10;
			RETURN;
		END_IF
		
		aoiLoadLeft.surfaceID := Surface.TOP;
		aoiLoadLeft.material := pair.left;
		
		aoiLoadRight.surfaceID := Surface.BOTTOM;
		aoiLoadRight.material := pair.right;
		
		aoiLoadLeft.execute := NOT aoiLoadLeft.recovery;
		aoiLoadRight.execute := NOT aoiLoadRight.recovery;
		
	10: //recovery		
		IF robotRight.error THEN //left ok, right error
			
			IF aoiLoadLeft.done THEN
				aoiLoadLeft.execute := FALSE;
				loadSet := COMPLETE;
				RETURN;
			END_IF
			
			aoiLoadLeft.surfaceID := Surface.BOTTOM;
			aoiLoadLeft.material := pair.bottom;
			aoiLoadLeft.execute := NOT aoiLoadLeft.recovery;
			
		ELSIF robotLeft.error THEN //left error, right ok
			
			IF aoiLoadRight.done THEN
				aoiLoadRight.execute := FALSE;
				loadSet := COMPLETE;
				RETURN;
			END_IF
			
			aoiLoadRight.surfaceID := Surface.TOP;
			aoiLoadRight.material := pair.top;
			aoiLoadRight.execute := NOT aoiLoadRight.recovery;
			
		END_IF
		
	COMPLETE:
		loadSet := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		load := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequence" Id="{96d77f50-a148-46c4-8ea5-43c584f562c9}">
      <Declaration><![CDATA[METHOD PRIVATE loadingSequence : BOOL
VAR_IN_OUT
	robot : RobotA21;
	storage : SkidMagazine;
	loadStep : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	slot : INT;
END_VAR
VAR CONSTANT
	suctionDistance : INT := 10;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
IF material = '' THEN
	loadingSequence := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0:
		robot.clearCommand();
		IF robot.Ready THEN
			loadStep := 1;
		END_IF
	
	1:
		IF surfaceID = Surface.BOTTOM (*AND_THEN conveyors not retracted*) THEN
			//retract conveyors
			RETURN;
		END_IF
		loadStep := 10;
		
	10: //grab from chipboard skid
		IF NOT storage.findSlot(material := material, index => slot) THEN
			fail := TRUE;
			RETURN;
		(*
		ELSIF surfaceID = Surface.BOTTOM (*AND_THEN (*conveyor not lowered*)*) THEN
			//lower conveyor
			RETURN;
		*)
		END_IF
		
		IF robot.eoatDistance < suctionDistance THEN
			robot.HoldMaterial := storage.getSlot(i := slot);
		END_IF
		
		IF robot.Done THEN
			loadStep := COMPLETE;
			RETURN;
		ELSIF robot.materialAtHoldingPosition.4 OR robot.materialAtHoldingPosition.5 THEN //bits 4 and 5 are chipboard in position
			loadStep := 20;
			RETURN;
		END_IF
		
		robot.setGroup(group := 1, value := A21.PLACE_CHIPBOARD_TOP);
		robot.setGroup(group := 2, value := slot);
		
	20: //place to bundle
		IF robotLeft.Done THEN
			loadStep := COMPLETE;
			RETURN;
		END_IF
		
		IF robot.HoldMaterial <> '' THEN
			loadedMaterials[surfaceID] := robot.HoldMaterial;
			robot.HoldMaterial := '';
		END_IF
		
	COMPLETE:
		IF loadedMaterials[surfaceID] = material THEN
			loadingSequence := TRUE;
		ELSE
			loadStep := 0;
		END_IF
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="maintenance" Id="{8ea8cc70-de6a-428d-95f1-128be1ff5518}">
      <Declaration><![CDATA[METHOD PRIVATE maintenance : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
//no specific tasks yet, free run and testing

IF robotLeft.Done THEN
	robotLeft.clearCommand();
END_IF

IF robotRight.Done THEN
	robotRight.clearCommand();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="process" Id="{4451bc85-ba29-4c10-8925-9cecf5fa2b5d}">
      <Declaration><![CDATA[METHOD PROTECTED process : BOOL
VAR_INPUT
	manualMode : BOOL;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	IDLE:
		IF execute THEN
			execute := FALSE;
			step := RETRACT_CONVEYOR;
		END_IF
		
	RETRACT_CONVEYOR:
		(*
		IF demoPair.bottom <> '' (*retract conveyors*) THEN
			IF TRUE (*BLSC 1-3 retracted*) THEN
				done := TRUE;
			END_IF
		ELSE
			done := TRUE;
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			done := FALSE;
			step := LOAD_MATERIAL;
		END_IF
		*)
		step := LOAD_CIP;
	LOAD_CIP:
		IF NOT done THEN
			done := load(pairIndex:= iPair, error=> error);
		END_IF
		
		IF
			(manualMode AND_THEN execute) OR
			(NOT manualMode AND_THEN done)
		THEN
			done := FALSE;
			execute := FALSE;
			
			step := EXTEND_CONVEYOR;
		END_IF
		
	EXTEND_CONVEYOR:
		(*
		IF FALSE (*conveyors not extended*) THEN
			//extend conveyors
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(FALSE) //conveyors extended
		THEN
			done := FALSE;
			step := COMPLETE;
		END_IF
		*)
		step := COMPLETE;
	COMPLETE:
		//reset everything
		step := IDLE;
		
		process := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Aborting" Id="{bcb80c20-bb9a-4602-aac8-f5e829bea7b5}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Aborting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
aoiLoadLeft.reset();
aoiLoadRight.reset();

robotLeft.clearCommand();
robotRight.clearCommand();

//stop conveyors

ps_Aborting :=
	NOT robotLeft.Busy AND
	NOT robotRight.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Clearing" Id="{b2125dae-b934-401c-82c0-ec5c61aac454}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Clearing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
(*reset conveyors*)

ps_Clearing := 
	NOT robotLeft.error AND
	NOT robotRight.error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Execute" Id="{714ac46d-98f5-401b-b4b3-ecea285a4535}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Execute : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE pmlMode OF
	0: //invalid mode
	ePMLProtUnitMode_Production:	ps_Execute := process(manualMode := FALSE, error => error);
	ePMLProtUnitMode_Maintenance:	maintenance();
	ePMLProtUnitMode_Manual:		ps_Execute := process(manualMode := TRUE, error => error);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Holding" Id="{643ec6b6-c148-4c47-8dc1-33bcf2229aa8}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Holding : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
//set robot to pause

ps_Holding := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Resetting" Id="{983ac4dd-1ff6-4e0c-b73e-4225e8740385}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Resetting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
(*reset conveyors*)

ps_Resetting := 
	reset AND
	NOT robotLeft.error AND
	NOT robotRight.error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Starting" Id="{2f649bf5-415a-4c25-bab7-838c2c091e48}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Starting : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
//extend conveyors

ps_Starting := TRUE; //conveyors extended]]></ST>
      </Implementation>
    </Method>
    <Method Name="ps_Stopping" Id="{9f68947d-2675-4ef1-bbb2-5fc51830c320}" FolderPath="PML Inter. States\">
      <Declaration><![CDATA[METHOD PROTECTED ps_Stopping : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
aoiLoadLeft.reset();
aoiLoadRight.reset();

robotLeft.clearCommand();
robotRight.clearCommand();

//stop conveyors

ps_Stopping :=
	NOT robotLeft.Busy AND
	NOT robotRight.Busy;]]></ST>
      </Implementation>
    </Method>
    <Action Name="runPML" Id="{bdde1b41-ae20-4311-934e-252ed06093a5}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[(*
PackML
	state machine for packaging applications - see Tc3_PackML_V2 library on InfoSys
	
	final states - wait for an input or condition and command to new state
	intermediate states - complete a task and call pmlStateMachine.M_StateComplete() to advance to next state
	
the following states currently use the same logic (albeit in different methods), implementation may change later
	ps_Stopping() and ps_Aborting()
	ps_Resetting() and ps_Clearing()
	
STOP - controlled stop **with intent to shutdown or vacate for extended time** induced by operator/HMI - otherwise use HOLD
ABORT - emergency stop due to machine errors


HOLD - minor local issues
SUSPEND - external issues

EXECUTE - major control logic
	different modes may require different tasks
	create methods as required for different modes, then call the correct method in ps_Completing()
	can be commanded to STOP, ABORT, HOLD, or SUSPEND at any point
COMPLETING - process complete, move product out of system and finish transition to COMPLETED
*)

IF //abort at machine error
	robotLeft.error OR 
	robotRight.error
	//+conveyor errors
THEN
	pmlCommand := ePMLCommand_Abort;
	
ELSIF stop THEN //stop at command stop
	pmlCommand := ePMLCommand_Stop;

ELSIF FALSE (*A2.4 cannot allow bundles to enter*) THEN //FALSE condition never executes - this is temporary
	pmlCommand := ePMLCommand_Suspend;
END_IF


CASE pmlState OF
	0: (*ePMLState_Undefined*) //default state on startup
		pmlCommand := ePMLCommand_Stop;
		
	ePMLState_Stopping:
		IF ps_Stopping() THEN
			pmlStateMachine.M_StateComplete();
		END_IF
		
	ePMLState_Stopped:
		pmlCommand := ePMLCommand_Reset;
	
    ePMLState_Resetting:
		IF ps_Resetting() THEN
			reset := FALSE;
			pmlStateMachine.M_StateComplete();
		END_IF
		
	ePMLState_Idle:
		IF execute THEN
			execute := FALSE;
			pmlCommand := ePMLCommand_Start;
		END_IF
	
	ePMLState_Starting:
		IF ps_Starting() THEN
			pmlStateMachine.M_StateComplete();
		END_IF
	
	ePMLState_Execute: 
		IF hold THEN
			pmlCommand := ePMLCommand_Hold;
		END_IF
		IF ps_Execute(error => error) THEN
			pmlStateMachine.M_StateComplete();
			pmlCommand := ePMLCommand_Complete;
		END_IF
		
	ePMLState_Completing:
		pmlStateMachine.M_StateComplete();
	
	ePMLState_Complete:
		pmlCommand := ePMLCommand_Reset;
	
	ePMLState_Holding:
		IF ps_Holding() THEN
			pmlStateMachine.M_StateComplete();
		END_IF
	
	ePMLState_Held:
		IF NOT hold THEN
			pmlCommand := ePMLCommand_Unhold;
		END_IF
	
	ePMLState_Unholding:
		pmlStateMachine.M_StateComplete(); //release all pause commands and IO
	
	ePMLState_Suspended: //based on output section conditions
	ePMLState_Suspending: //based on output section conditions
	ePMLState_Unsuspending: //based on output section conditions
	
	ePMLState_Aborting:
		IF ps_Aborting() THEN
			pmlStateMachine.M_StateComplete();
		END_IF
	
	ePMLState_Aborted:
		pmlCommand := ePMLCommand_Clear;
	
	ePMLState_Clearing:
		IF ps_Clearing() THEN
			pmlStateMachine.M_StateComplete();
		END_IF
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ChipboardEx">
      <LineId Id="4957" Count="0" />
      <LineId Id="4887" Count="0" />
      <LineId Id="5074" Count="2" />
      <LineId Id="4806" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.blocks">
      <LineId Id="17" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="3" />
      <LineId Id="1" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="110" Count="3" />
      <LineId Id="122" Count="0" />
      <LineId Id="115" Count="6" />
      <LineId Id="83" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.callLocalModules">
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.load">
      <LineId Id="415" Count="3" />
      <LineId Id="554" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="422" Count="10" />
      <LineId Id="509" Count="1" />
      <LineId Id="514" Count="2" />
      <LineId Id="508" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="521" Count="2" />
      <LineId Id="525" Count="3" />
      <LineId Id="519" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="447" Count="1" />
      <LineId Id="544" Count="0" />
      <LineId Id="540" Count="3" />
      <LineId Id="539" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="537" Count="1" />
      <LineId Id="536" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="553" Count="0" />
      <LineId Id="549" Count="3" />
      <LineId Id="472" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="547" Count="1" />
      <LineId Id="546" Count="0" />
      <LineId Id="473" Count="4" />
      <LineId Id="479" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.loadingSequence">
      <LineId Id="279" Count="63" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.maintenance">
      <LineId Id="21" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="1" />
    </LineIds>
    <LineIds Name="ChipboardEx.process">
      <LineId Id="72" Count="61" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Aborting">
      <LineId Id="6" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="10" Count="6" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Clearing">
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Execute">
      <LineId Id="18" Count="4" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Holding">
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Resetting">
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Starting">
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.ps_Stopping">
      <LineId Id="20" Count="0" />
      <LineId Id="40" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ChipboardEx.runPML">
      <LineId Id="533" Count="25" />
      <LineId Id="561" Count="1" />
      <LineId Id="665" Count="0" />
      <LineId Id="564" Count="24" />
      <LineId Id="664" Count="0" />
      <LineId Id="589" Count="5" />
      <LineId Id="596" Count="1" />
      <LineId Id="604" Count="1" />
      <LineId Id="680" Count="1" />
      <LineId Id="616" Count="2" />
      <LineId Id="661" Count="2" />
      <LineId Id="619" Count="40" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>